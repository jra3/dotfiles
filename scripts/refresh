#!/bin/bash

PROJ=$HOME/interana/backend

# A POSIX variable
OPTIND=1

# Initialize our own variables:
build=0
test=0
install=0
dev=''
skip_frontend=0
upgrade=0

while getopts "bBtiouUd" opt; do
    case "$opt" in
    b)  do_build=1
        ;;
    B)  do_build=2
        ;;
    t)  test=1
        ;;
    i)  install=1
        ;;
    o)  skip_frontend=1
        ;;
    d)  dev='1'
        ;;
    u)  upgrade=1
        ;;
    U)  upgrade=2
        ;;
    esac
done

if [[ $install > 0 ]] ;then
    echo DEPS
    cd $PROJ/deploy && . ./install_build_deps.sh
fi

if [[ $do_build == 1 ]] ;then
    echo BUILD
    cd $PROJ && make clean && make release
elif [[ $do_build == 2 ]] ;then
    cd $PROJ/csv2json && make release
    cd $PROJ/data-server && make release
    cd $PROJ/string_server && make release
    cd $PROJ/interana_tailer && make release
    cd $PROJ/import_server && make release
    cd $PROJ/import_server/purifier && make release
    cd $PROJ/import_server/jsonfilters && make release
    cd $PROJ && (
        echo "$(git symbolic-ref HEAD 2> /dev/null | cut -b 12-)-$(git log --pretty=format:\"%h\" -1)" > VERSION.txt
        git status >> VERSION.txt
        echo "Compiled on $(date), hostname=$(hostname), from $(pwd)" >> VERSION.txt
        echo "Tag is $(git describe --always --tag)" >> VERSION.txt
        echo "Full SHA and landing time=$(git log -1 --format=\"%H%n%aD\")" >> VERSION.txt
    )
fi

if [[ $upgrade == 2 ]] ;then
    # upgrade a dev cluster
    $PROJ/scripts/mon_me.sh restart all

elif [[ $upgrade == 1 ]] ; then
    cd $PROJ/deploy && DEV=$dev COVERAGE=1 ./upgrade_cluster.py  #  --skip-backup --skip-frontend

else
    echo UNINSTALL

    cd $PROJ/deploy && ./stop_backend.sh && ./stop_frontend.sh

    # extreme predjudice
    sudo pkill -u interana
    sudo pkill -u interana-www
    sudo pkill -u iasql

    sudo rm -rf /tmp/interana /var/run/interana /var/log/interana/*
    sudo rm -rf /data/interana/*
    sudo rm -rf /opt/interana/{backend,frontend,data,nginx,workarounds}

    echo SETUP

    rm -f $PROJ/config.yml

    # # if I want a dev 3rd party sript install it here
    # /opt/interana/third_party/bin/pip install pysaml2

    cd $PROJ/deploy && DEV=$dev COVERAGE=1 ./setup_cluster_backend.sh  && sleep 3

    # All the things
    cd $PROJ && common/py/config.py ADD_SETTING -a query-api -k cookie_secret -v honker
    cd $PROJ/deploy && ./create_customer.py test -t
    cd $PROJ/scripts/rbac && ./user_role.py create -r admin -c 1 -u test@interana.com
    # cd $PROJ/deploy && ./create_usage_table.py -i local test 
    cd $PROJ/scripts && ./load_fake_data.py -t test_table local

    # cd $PROJ/deploy && ./create_log_pipeline.py --table_name internal4 --customer_label internal4 --s3_folder internal4 --which_logs all --customer_name test --s3_key AKIAITNPDJ2FOP3KHFNA --s3_secret_key 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 --hourly_bucket

    # "api_token": "Xz27z9wXLhHoLnY4ctukTnBRa/PsCV9vOomM/mNX3e49wJJH7JpC2zaavcU1el11nPalxFCWX=uT9SNB4GhyQnb=T0nk0000"
    echo "INSERT INTO user_api_tokens VALUES ('X=uT9SNB4GhyQnb=T0nk0000','\$2a\$12\$s/R2z6WgYovtNlGxl6w3EOqmzgFS0t.K4tuVf6j/PvMFDczSGsEsC',1,2);" | /opt/interana/third_party/bin/mysql customers --socket=/tmp/iasql.sock  <&0 -u nobody -pti

    $PROJ/scripts/mon_me.sh stop
    sudo rm -rf /opt/interana/.auth_token
    $PROJ/scripts/mon_me.sh start  
    $PROJ/scripts/mon_me.sh restart all

    sudo rm -rf /opt/interana/frontend/www
    # if [[ $skip_frontend = 0 ]] ;then
    #     cd $PROJ/deploy && ./setup_frontend.sh
    #     cd $PROJ/www && node_modules/.bin/gulp dev
    # fi

fi

sudo rm -rf /opt/interana/frontend/www
sudo ln -s $PROJ/www /opt/interana/frontend/www

curl http://localhost:8400/login > /dev/null 2>&1
curl http://localhost:8000 > /dev/null 2>&1

/opt/interana/third_party/bin/pip install --user --upgrade importmagic jedi rope yapf elpy

if [[ $test > 0 ]] ;then
    echo TEST
    (
        cd $PROJ &&
        find . -type f -name "*.pyc" -exec rm -f {} \; &&
        scripts/cover_me.sh
    )
fi

notif cluster ready
